name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta, nightly]
        include:
          - rust: stable
            cache-key: stable
          - rust: beta
            cache-key: beta
          - rust: nightly
            cache-key: nightly

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ matrix.cache-key }}

    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ matrix.cache-key }}

    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ matrix.cache-key }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Install cargo-audit
      if: matrix.rust == 'stable'
      run: cargo install cargo-audit

    - name: Check formatting
      if: matrix.rust == 'stable'
      run: cargo fmt --all -- --check

    - name: Run clippy
      if: matrix.rust == 'stable'
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run tests
      run: cargo test --verbose --all-features

    - name: Run documentation tests
      run: cargo test --doc --verbose

    - name: Build documentation
      run: cargo doc --no-deps --all-features

    - name: Run security audit
      if: matrix.rust == 'stable'
      run: cargo audit

    - name: Check for unused dependencies
      if: matrix.rust == 'stable'
      run: cargo machete

  test-features:
    name: Test Features
    runs-on: ubuntu-latest
    strategy:
      matrix:
        feature-set:
          - "core"
          - "crypto"
          - "http"
          - "json"
          - "cache"
          - "db"
          - "cron"
          - "extra"
          - "jwt"
          - "algorithms"
          - "text"

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable

    - name: Cache cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.feature-set }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Test with feature
      run: cargo test --no-default-features --features ${{ matrix.feature-set }} --verbose

  test-no-default-features:
    name: Test No Default Features
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable

    - name: Cache cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-no-default-${{ hashFiles('**/Cargo.lock') }}

    - name: Test without default features
      run: cargo test --no-default-features --verbose

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
        components: rustfmt, clippy

    - name: Cache cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-bench-${{ hashFiles('**/Cargo.lock') }}

    - name: Run benchmarks
      run: cargo bench --verbose

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable

    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin

    - name: Cache cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-coverage-${{ hashFiles('**/Cargo.lock') }}

    - name: Generate coverage report
      run: cargo tarpaulin --verbose --all-features --out Html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./tarpaulin-report.html
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    name: Security
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable

    - name: Install security tools
      run: |
        cargo install cargo-audit
        cargo install cargo-deny

    - name: Cache cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-security-${{ hashFiles('**/Cargo.lock') }}

    - name: Run security audit
      run: cargo audit

    - name: Run cargo deny
      run: cargo deny check

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, 1.89.0]

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}

    - name: Cache cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-build-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Build
      run: cargo build --verbose --all-features

    - name: Build release
      run: cargo build --release --verbose --all-features
